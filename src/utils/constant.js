const statusCode = Object.freeze({
  SUCCESS: 200,
  CREATED: 201,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  INTERNAL_SERVER_ERROR: 500,
});

const responseMessage = Object.freeze({
  UNAUTHENTICATED: "Please login to continue.",
  EMAIL_ALREADY_USE: "Email is already in use by other account.",
  VERIFY_EMAIL_SENT: "Verification email sent. Please verify your self.",
  SIGNUP_SUCCESSFUL:
    "Signup successful. Please verify your self using the OTP sent to the provided email.",
  SIGNUP_FAILED: "Signup failed",
  INVALID_EMAIL: "Invalid email. Please provide correct email.",
  NOT_VERIFIED_VERIFICATION_EMAIL_SENT:
    "You are not verified. Verification email sent. Please verify your self.",
  INVALID_PASSWORD: "Invalid credentials",
  LOGIN_SUCCESSFUL: "Login successful",
  LOGIN_FAILED: "Error during login",
  USER_NOT_FOUND: "User is not found",
  USER_ALREADY_VERIFIED: "User is already verified",
  INVALID_OTP: "Invalid OTP. Please provide correct otp.",
  OTP_EXPIRED: "OTP expired. Please try again.",
  USER_VERIFIED: "User verified successfully",
  OTP_VERIFICATION_FAILED: "OTP verification failed",
  GOOGLE_AUTHENTICATION_SUCCESSFUL: "Google authentication successful",
  GOOGLE_AUTHENTICATION_FAILED: "Error during Google Authentication.",
  TABLE_ALREADY_EXISTS: "Table number already exists.",
  TABLE_CREATED: "Table created successfully",
  TABLE_CREATION_FAILED: "Failed to create table",
  INVALID_TABLE_ID: "Invalid table ID.",
  TABLE_NOT_FOUND: "Table is not found",
  TABLE_DETAILS_FETCHED: "Table details fetched",
  FETCHING_TABLE_DETAILS_FAILED: "Error while fetching table details",
  FOOD_CREATED: "Food item created successfully",
  FOOD_CREATION_FAILED: "Failed to create food item",
  FOOD_NOT_FOUND: "Food item not found.",
  FOOD_RETRIEVED: "All food items retrieved successfully",
  FOOD_RETRIEVE_FAILED: "Failed to retrieve food items",
  INVALID_FOOD_ID: "Invalid food ID.",
  FOOD_UPDATED: "Food item updated successfully",
  FOOD_UPDATE_FAILED: "Failed to update food item",
  FOOD_DELETED: "Food item deleted successfully",
  FOOD_DELETE_FAILED: "Failed to delete food item",
  INVALID_ORDER_ID: "Invalid order ID.",
  ORDER_NOT_FOUND: "Order not found.",
  MANAGE_ORDER_FAILED: "Failed to manage order",
  INVALID_BILL_ID: "Invalid bill ID.",
  BILL_NOT_FOUND: "Bill not found.",
  BILL_RETRIEVED: "Bill retrieved successfully",
  BILL_RETRIEVE_FAILED: "Failed to retrieve bill.",
  BILLS_NOT_FOUND: "No bills found.",
  BILLS_RETRIEVED: "All bills retrieved successfully",
  BILLS_RETRIEVE_FAILED: "Failed to retrieve bills",
  POPULAR_FOOD_LIST: "Food list retrieved based on popularity",
  CATEGORY_FOOD_LIST: "Food items grouped by category",
  TABLE_HAS_PENDING_ORDER: "Table already has a pending order.",
  ORDER_CONTAIN_INVALID_FOOD: "Order contain invalid food items.",
  ORDER_PLACED: "Order placed successfully",
  ORDER_PLACED_FAILED: "Failed to place order",
  BILL_NOT_FOUND_FOR_ORDER: "Bill is not found for this order",
  BILLS_NOT_FOUND_FOR_USER: "No bills found for this user.",
  USER_BILL_RETRIEVED: "User's bills retrieved successfully",
  INVALID_TOKEN: "Invalid or expired token",
  ERROR_DURING_VALIDATION: "Internal Server Error during validation.",
});

module.exports = { statusCode, responseMessage };
